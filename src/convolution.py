{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "12743cbb-ec63-4f1d-a92b-7ed9fb59b958",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import cv2\n",
    "\n",
    "# ----------------------------\n",
    "# Fonction de chargement d'image\n",
    "# ----------------------------\n",
    "def image_load(image_path, channel=None):\n",
    "    assert os.path.exists(image_path), f\"Erreur: Le fichier {image_path} n'existe pas.\"\n",
    "\n",
    "    if channel == 1:\n",
    "        img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)\n",
    "        assert len(img.shape) == 2, \"L'image chargée n'est pas en niveaux de gris.\"\n",
    "    elif channel == 3:\n",
    "        img = cv2.imread(image_path)\n",
    "        assert len(img.shape) == 3 and img.shape[2] == 3, \"L'image chargée n'est pas RGB.\"\n",
    "        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n",
    "    else:\n",
    "        img = cv2.imread(image_path)\n",
    "        if len(img.shape) == 3:\n",
    "            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n",
    "    \n",
    "    return img\n",
    "\n",
    "# ----------------------------\n",
    "# Fonction de convolution\n",
    "# ----------------------------\n",
    "def apply_convolution(image, kernel):\n",
    "    assert isinstance(image, np.ndarray), \"L'image doit être un tableau NumPy.\"\n",
    "    assert isinstance(kernel, np.ndarray), \"Le noyau doit être un tableau NumPy.\"\n",
    "    assert len(kernel.shape) == 2, \"Le noyau doit être une matrice 2D.\"\n",
    "    assert kernel.shape[0] == kernel.shape[1], \"Le noyau doit être carré.\"\n",
    "    assert kernel.shape[0] % 2 == 1, \"Le noyau doit avoir une taille impaire.\"\n",
    "\n",
    "    kernel_size = kernel.shape[0]\n",
    "    pad = kernel_size // 2\n",
    "\n",
    "    if len(image.shape) == 3:\n",
    "        channels = image.shape[2]\n",
    "        height, width = image.shape[:2]\n",
    "        output = np.zeros_like(image, dtype=np.float32)\n",
    "\n",
    "        for c in range(channels):\n",
    "            padded = np.pad(image[:, :, c], ((pad, pad), (pad, pad)), mode='constant')\n",
    "            for i in range(height):\n",
    "                for j in range(width):\n",
    "                    region = padded[i:i+kernel_size, j:j+kernel_size]\n",
    "                    output[i, j, c] = np.sum(region * kernel)\n",
    "    else:\n",
    "        height, width = image.shape\n",
    "        padded = np.pad(image, ((pad, pad), (pad, pad)), mode='constant')\n",
    "        output = np.zeros_like(image, dtype=np.float32)\n",
    "\n",
    "        for i in range(height):\n",
    "            for j in range(width):\n",
    "                region = padded[i:i+kernel_size, j:j+kernel_size]\n",
    "                output[i, j] = np.sum(region * kernel)\n",
    "\n",
    "    return np.clip(output, 0, 255).astype(np.uint8)\n",
    "\n",
    "# ----------------------------\n",
    "# Définition des noyaux\n",
    "# ----------------------------\n",
    "blur_kernel_3x3 = np.array([\n",
    "    [1/9, 1/9, 1/9],\n",
    "    [1/9, 1/9, 1/9],\n",
    "    [1/9, 1/9, 1/9]\n",
    "])\n",
    "\n",
    "sobel_horizontal = np.array([\n",
    "    [-1, 0, 1],\n",
    "    [-2, 0, 2],\n",
    "    [-1, 0, 1]\n",
    "])\n",
    "\n",
    "sobel_vertical = np.array([\n",
    "    [-1, -2, -1],\n",
    "    [0, 0, 0],\n",
    "    [1, 2, 1]\n",
    "])\n",
    "\n",
    "sharpen_kernel = np.array([\n",
    "    [0, -1, 0],\n",
    "    [-1, 5, -1],\n",
    "    [0, -1, 0]\n",
    "])\n",
    "\n",
    "# Filtre aléatoire\n",
    "def generate_random_kernel(size=3, seed=None):\n",
    "    if seed is not None:\n",
    "        np.random.seed(seed)\n",
    "    kernel = np.random.rand(size, size)\n",
    "    kernel -= kernel.mean()\n",
    "    return kernel / kernel.sum() if abs(kernel.sum()) > 1e-6 else kernel\n",
    "\n",
    "random_kernel_3x3 = generate_random_kernel(3, seed=42)\n",
    "random_kernel_5x5 = generate_random_kernel(5, seed=42)\n",
    "random_kernel_7x7 = generate_random_kernel(7, seed=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e0bc0820-1a52-4c00-934d-23491c9cd483",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
